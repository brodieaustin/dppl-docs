---
layout: page
title: HTML Elements
permalink: /
readers: [publishers, editors]
---

## Overview

One of the reasons to use a content management system with a nice, easy to use editing tool is to avoid having people learn HTML. Learning HTML is not too hard, but mastering it is another story.

In any case, it is good to have a basic sense of the HTML element that are being generated by the WYSIWYG editor and how the editor interacts with these elements.

## Principles

One of the things you’ll hear me saying in this section is to avoid “hard coding” anything into your content. What does this mean?

Well, one of the fundamental principles of modern web design is:

> Separate content from presentation

In other words, your content should not contain information about how it should look. If you do that, then your content can’t migrate from system to system very easily. This was one of the reasons why we nuked the old site during the site redesign.

Also, because so many people are using smartphones and tablets, we can’t assume that everyone will see the content in the exact same way that we are. If you spend too much time getting the line lengths or spacing to look just so on your 23” wide desktop monitor, that might not work at all on a 4” smartphone.

So, you don’t want to be too opinionated about how your content should look. Focus more on what it says and what it does.

### What does this mean?

It can mean a lot of different things, but in terms of using an editor in a CMS, one tempatation to avoid is **using the enter key to space things out**. We'll look at this below, but suffice it to say that you should not use the Enter key to make more space between a heading and a paragraph, or between paragraphs. This is a bad habit that people carry over from MS Word. But you don't need to do that in the CMS.

## Paragraphs

Paragraphs are a pretty fundamental and primary unit of content. They’re pretty fundamental in the editor too. Every time you’re inside an editing field and press enter you’re creating a new paragraph with an empty space inside of it (it’s actually a series of characters representing space, like a donut formed around a hole).

HTML uses the `<p>` tag to represent paragraphs. So, another way of looking at it is that every time you hit Enter you’re creating paragraph tags.

This is why it is important to avoid doing something like this:

Let’s say you have two paragraphs like this:

    I like rainy days.
    I like snowy days.

But you think they’re not spaced properly so you do this:

    I like rainy days.
    
    I like snowy days.

What you have done is actually added an empty paragraph between the two paragraphs. In HTML terms:

<div class="html">
<pre>
<code>
    &lt;p&gt;I like rainy days.&lt;/p&gt;
    &lt;p&gt;&lt;/p&gt;
    &lt;p&gt;I like snowy days.&lt;/p&gt;
</code>
</pre>
</div>

You don’t need to do this. The website will add the proper amount of spacing between paragraphs. The more of these empty element that get added on to a page to bigger and easier to mess up they become.

> **Tip:** Use the Show Blocks button in the editor (looks like a backwards L) to see which tags you have created around your content. Each element on the page gets a box around with. If you see any empty boxes, you need to remove those.

We typically use paragraph tags for the following things on the site:

- Regular old paragraphs of text
- Addresses

## Breaks

Breaks are like soft breaks between text. Above, I mention that every time you hit enter you are creating a new paragraph. A break is the opposite of that. You are just manually inserting a line break.

Use breaks sparingly though. You are basically hard coding these line breaks into your text. Think about how the text will look as it reflows in different device sizes. If you chose a line break that looked good on your desktop computer, it might not look good on a phone.

If you press `SHIFT + Enter`, you will create a break.

We typically use breaks for:

- Splitting up an address into lines

## Headings

Headings are one of the most important tools we have to accomplish a few things on a page:

- Headings help search engines understand what’s on the page.
- Headings help people scan the content.
- Headings break up monotonous blocks of text.

We have the following headings available to us in the page editor:

- Primary heading
- Secondary heading
- Tertiary heading

### Picking the right header

One mistake that people often make is that they choose a heading based on how it looks. This is wrong. Your headings should follow a logical flow, almost like an outline.

In fact, if you try to imagine your content like an outline, you’ll see how headings work:

- (Primary) Getting Started
    - (Secondary) Signing up
    - (Secondary) Confirmation
- (P) Using our service
    - (S) Checking something
    - (S) Writing something
        - (Tertiary) Fixing a writing mistake

Hopefully this outline show how each Primary heading creates a new section on the page (in fact there is a thing known as the HTML Document Outlining Algorithm that tries to figure all of this out.

## Lists

Lists are very helpful for making long lists of things easy to scan and navigate. I usually recommend that you use lists the following way:

- Numbered lists for instructions, steps, or anyting that needs to appear in a specific order
- Bulleted lists for anything where the order doesn’t really matter like book lists, links to webpages, etc.

## Tables

Tables are one of most abused element in all of HTML. In days of yore (just recently for us), tables were used to actually layout out websites. Pieces of content would fit into different cells of the table. This violated the “separate content from presentation” principle.

Instead, we only use tables to display tabular data. In other words, data that makes more sense when it is displayed with columns and rows.

There aren’t many cases where a table is necessary and you should see me if you think you need to use one. Maintaining  a table can be a little more work that the other elements we’ve been talking about.
